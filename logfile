==2653516== Memcheck, a memory error detector
==2653516== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2653516== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==2653516== Command: ./fdf ./test_maps/42.fdf
==2653516== Parent PID: 2652665
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A7FB: smooth_scale (shift.c:42)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A81F: smooth_scale (shift.c:46)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A82B: smooth_scale (shift.c:46)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A887: smooth_scale (shift.c:51)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A893: smooth_scale (shift.c:51)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A8EC: smooth_scale (shift.c:56)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== Conditional jump or move depends on uninitialised value(s)
==2653516==    at 0x10A8F8: smooth_scale (shift.c:56)
==2653516==    by 0x10AEE3: main (main.c:73)
==2653516== 
==2653516== 
==2653516== HEAP SUMMARY:
==2653516==     in use at exit: 317,955 bytes in 3,107 blocks
==2653516==   total heap usage: 84,034 allocs, 80,927 frees, 59,570,769 bytes allocated
==2653516== 
==2653516== 0 bytes in 1 blocks are definitely lost in loss record 1 of 2,271
==2653516==    at 0x48484F4: malloc (m_replacemalloc/vg_replace_malloc.c:442)
==2653516==    by 0x4005A22: malloc (rtld-malloc.h:56)
==2653516==    by 0x4005A22: _dl_find_object_update (dl-find_object.c:791)
==2653516==    by 0x400ECCF: dl_open_worker_begin (dl-open.c:735)
==2653516==    by 0x4A55A97: _dl_catch_exception (dl-error-skeleton.c:208)
==2653516==    by 0x400DF99: dl_open_worker (dl-open.c:782)
==2653516==    by 0x4A55A97: _dl_catch_exception (dl-error-skeleton.c:208)
==2653516==    by 0x400E34D: _dl_open (dl-open.c:883)
==2653516==    by 0x497163B: dlopen_doit (dlopen.c:56)
==2653516==    by 0x4A55A97: _dl_catch_exception (dl-error-skeleton.c:208)
==2653516==    by 0x4A55B62: _dl_catch_error (dl-error-skeleton.c:227)
==2653516==    by 0x497112D: _dlerror_run (dlerror.c:138)
==2653516==    by 0x49716C7: dlopen_implementation (dlopen.c:71)
==2653516==    by 0x49716C7: dlopen@@GLIBC_2.34 (dlopen.c:81)
==2653516== 
==2653516== LEAK SUMMARY:
==2653516==    definitely lost: 0 bytes in 1 blocks
==2653516==    indirectly lost: 0 bytes in 0 blocks
==2653516==      possibly lost: 0 bytes in 0 blocks
==2653516==    still reachable: 317,955 bytes in 3,106 blocks
==2653516==         suppressed: 0 bytes in 0 blocks
==2653516== Reachable blocks (those to which a pointer was found) are not shown.
==2653516== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2653516== 
==2653516== Use --track-origins=yes to see where uninitialised values come from
==2653516== For lists of detected and suppressed errors, rerun with: -s
==2653516== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
